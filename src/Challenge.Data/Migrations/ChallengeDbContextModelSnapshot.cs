// <auto-generated />
using System;
using Template.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Template.Data.Migrations
{
    [DbContext(typeof(TemplateDbContext))]
    partial class TemplateDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("Template.Business.Models.Evento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Tempo")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric(10,5)");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("Template.Business.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Pais")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Regiao")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Sensores");
                });

            modelBuilder.Entity("Template.Business.Models.Evento", b =>
                {
                    b.HasOne("Template.Business.Models.Sensor", "Sensor")
                        .WithMany("Eventos")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
